# GenerateTemplate.cmake
# Usage: cmake -P GenerateTemplate.cmake
# Required variables:
#   INPUT             - path to .in file
#   OUTPUT            - output path
#   LAYOUT_NAME       - pixel layout name (e.g. "x1lsb")
#   PUBLIC_PREFIX     - public prefix (e.g. "inknit_x1lsb_")
#   INTERNAL_PREFIX   - internal prefix (e.g. "_iktx1lsb_")

include("${CMAKE_CURRENT_LIST_DIR}/../InknitUtils.cmake" NO_POLICY_SCOPE)

# Read template content
file(READ "${INPUT}" CONTENTS)

# Escape line-end backslashes & semicolon
string(REGEX REPLACE "\\\\[ \t]*\n" "__BACKSLASH_EOL__\n" CONTENTS "${CONTENTS}")
string(REPLACE       ";"            "__SEMICOLON__"       CONTENTS "${CONTENTS}")

string(REPLACE "\r\n" "\n" CONTENTS "${CONTENTS}")
string(REPLACE "\r"   "\n" CONTENTS "${CONTENTS}")
string(REPLACE "\n"   ";"  LINES    "${CONTENTS}")

set(SWITCH_ACTIVE  FALSE)
set(EMIT FALSE)
set(OUTPUT_LINES "")
set(TEMP "")

foreach(line IN LISTS LINES)
	string(STRIP "${line}" STRIPPED_LINE)

	if(STRIPPED_LINE MATCHES "^#template_switch[ \t]+(.+)$")
		set(SWITCH_VAR "${CMAKE_MATCH_1}")
		set(SWITCH_ACTIVE TRUE)
		set(EMIT FALSE)
		continue()
	endif()

	if(SWITCH_ACTIVE)
		if(STRIPPED_LINE MATCHES "^#template_case[ \t]+\"(.+)\"$")
			if(SWITCH_ACTIVE AND "${${SWITCH_VAR}}" STREQUAL "${CMAKE_MATCH_1}")
				set(EMIT TRUE)
			else()
				set(EMIT FALSE)
			endif()
			continue()
		endif()

		if(STRIPPED_LINE MATCHES "^#template_default$")
			set(EMIT FALSE)
			continue()
		endif()

		if(STRIPPED_LINE MATCHES "^#template_endswitch$")
			set(SWITCH_VAR "")
			set(SWITCH_ACTIVE  FALSE)
			set(EMIT FALSE)
			continue()
		endif()
	endif()

	if(NOT SWITCH_ACTIVE OR EMIT)
		list(APPEND OUTPUT_LINES "${line}")
	endif()
endforeach()

# Add message
list(PREPEND OUTPUT_LINES "")
list(PREPEND OUTPUT_LINES "// WARNING: Please don't edit this file. It was generated by cmake script.")

# Join the output
string(REPLACE ";"             "\n" OUTPUT_LINES "${OUTPUT_LINES}")
string(REPLACE "__SEMICOLON__" ";"  OUTPUT_TEXT  "${OUTPUT_LINES}")

# Variable substitution
string(CONFIGURE "${OUTPUT_TEXT}" FINAL_TEXT)

# Restore backslashes
string(REPLACE "__BACKSLASH_EOL__" "\\" FINAL_TEXT "${FINAL_TEXT}")

# Set writable for update
inknit_set_file_writable("${OUTPUT}")

# Write final content
file(WRITE "${OUTPUT}" "${FINAL_TEXT}")

# Set read-only to lock
inknit_set_file_readonly("${OUTPUT}")
