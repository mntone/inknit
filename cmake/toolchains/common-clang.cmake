include("${CMAKE_CURRENT_LIST_DIR}/../FindLlvmConfig.cmake")

execute_process(
	COMMAND "${LLVM_CONFIG}" --bindir
	OUTPUT_VARIABLE LLVM_BINARY_DIR
	OUTPUT_STRIP_TRAILING_WHITESPACE
	)

set(CMAKE_LINKER_TYPE LLD)

# Specify the cross compiler.
set(CMAKE_C_COMPILER   "${LLVM_BINARY_DIR}/clang"   CACHE FILEPATH "C compiler")
set(CMAKE_CXX_COMPILER "${LLVM_BINARY_DIR}/clang++" CACHE FILEPATH "C++ compiler")
set(CMAKE_ASM_COMPILER "${LLVM_BINARY_DIR}/clang"   CACHE FILEPATH "ASM compiler")

set(CMAKE_C_COMPILER_ID   Clang)
set(CMAKE_CXX_COMPILER_ID Clang)
set(CMAKE_ASM_COMPILER_ID Clang)

set(CMAKE_OBJCOPY "${LLVM_BINARY_DIR}/llvm-objcopy" CACHE INTERNAL "")
set(CMAKE_OBJDUMP "${LLVM_BINARY_DIR}/llvm-objdump" CACHE INTERNAL "")
set(CMAKE_READELF "${LLVM_BINARY_DIR}/llvm-readelf" CACHE INTERNAL "")

foreach(LANG IN ITEMS C CXX ASM)
	set(CMAKE_${LANG}_FLAGS_INIT "${INKNIT_CLANG_CPU_FLAGS} ${INKNIT_CLANG_SECURITY_FLAGS}")
	set(CMAKE_${LANG}_FLAGS_DEBUG_INIT          "-O0 -g")
	set(CMAKE_${LANG}_FLAGS_RELEASE_INIT        "-Oz")
	set(CMAKE_${LANG}_FLAGS_MINSIZEREL_INIT     "-Oz")
	set(CMAKE_${LANG}_FLAGS_RELWITHDEBINFO_INIT "-Oz -DNDEBUG")
	set(CMAKE_${LANG}_LINK_FLAGS "${INKNIT_CLANG_LINK_FLAGS}")
	set(CMAKE_${LANG}_OUTPUT_EXTENSION .o)
endforeach()
set(CMAKE_ASM_FLAGS_INIT "-Wno-unused-command-line-argument ${CMAKE_ASM_FLAGS_INIT}")

# Look for includes and libraries only in the target system prefix.
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
