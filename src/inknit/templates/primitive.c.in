/*
 * inknit <https://github.com/mntone/inknit>
 *
 * Copyright (C) 2025 mntone <901816+mntone@users.noreply.github.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

#ifdef __INTELLISENSE__
#include "../x1lsb/base.h"
#include "base.h.in"
#else
#include "${LAYOUT_NAME}/base.h"
#include "base.h"
#endif

inknit_color_t
PUBLIC_FUNCNAME(get)(const struct inknit_image *image, inknit_uint_t x, inknit_uint_t y) {
	INKNIT_ASSUME(image != NULL, MSG_IMAGE_IS_NULL);
	INKNIT_ASSUME(image->pixel_layout == TARGET_LAYOUT, MSG_IMAGE_IS_INVALID_LAYOUT);
	INKNIT_ASSUME(image->alignment >= TARGET_ALIGNMENT, MSG_IMAGE_IS_INVALID_ALIGN);

	INKNIT_ASSUME(x >= 0, MSG_X_LESS_THAN_ZERO);
	INKNIT_ASSUME(x <= INKNIT_X_MAX, MSG_X_GREATER_THAN_MAX_VALUE);

	INKNIT_ASSUME(y >= 0, MSG_Y_LESS_THAN_ZERO);
	INKNIT_ASSUME(y <= INKNIT_Y_MAX, MSG_Y_GREATER_THAN_MAX_VALUE);

	inknit_color_t color = INTERNAL_FUNCNAME(get)(image, x, y);
	return color;
}

void PUBLIC_FUNCNAME(clear)(struct inknit_image *image, inknit_color_t color) {
	INKNIT_ASSUME(image != NULL, MSG_IMAGE_IS_NULL);
	INKNIT_ASSUME(image->pixel_layout == TARGET_LAYOUT, MSG_IMAGE_IS_INVALID_LAYOUT);
	INKNIT_ASSUME(image->alignment >= TARGET_ALIGNMENT, MSG_IMAGE_IS_INVALID_ALIGN);
	INKNIT_ASSUME(color <= POW2_BITS_PER_PIXEL_NEG1, MSG_COLOR_GREATER_THAN_MAX_VALUE);

#ifdef INKNIT_USE_MEMORY_H
	const inknit_color_t pattern = INTERNAL_FUNCNAME(fillByteWithColor)(color);
	const uint32_t       bytes   = (uint32_t)image->stride * image->height;
	memset(image->data, (int)pattern, (size_t)bytes);
#else
	const inknit_color_t pattern = INTERNAL_FUNCNAME(fillWordWithColor)(color);
	const uint32_t       words   = ((uint32_t)image->stride * image->height) >> 2;
	uint32_t            *data    = (uint32_t *)image->data;
	for (uint32_t i = 0; i < words; ++i) {
		data[i] = pattern;
	}
#endif
}
