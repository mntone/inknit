/*
 * inknit <https://github.com/mntone/inknit>
 *
 * Copyright (C) 2025 mntone <901816+mntone@users.noreply.github.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

#ifdef __INTELLISENSE__
#include "../base.h.in"
#else
#include "../base.h"
#endif

#define _inknit_fill_circle_hlines32 INKNIT_CURRENT_INTERNAL_FUNC(fill_circle_hlines)
static inline void _inknit_fill_circle_hlines32(
	uint32_t *INKNIT_RESTRICT                 data,
	uint32_t                                  stride,
	int32_t                                   cx,
	int32_t                                   cy,
	int32_t                                   dx,
	int32_t                                   dy,
	inknit_color_t                            color,
	const struct inknit_rect *INKNIT_RESTRICT clip_rect
) {
	int32_t y1 = cy - dy;
	_inknit_draw_hline_with_clip32(data, stride, cx - dx, cx + dx, y1, color, clip_rect);

	if (dy != 0) {
		int32_t y2 = cy + dy;
		_inknit_draw_hline_with_clip32(data, stride, cx - dx, cx + dx, y2, color, clip_rect);
	}

	if (dx != dy) {
		int32_t y3 = cy - dx;
		_inknit_draw_hline_with_clip32(data, stride, cx - dy, cx + dy, y3, color, clip_rect);

		if (dx != 0) {
			int32_t y4 = cy + dx;
			_inknit_draw_hline_with_clip32(data, stride, cx - dy, cx + dy, y4, color, clip_rect);
		}
	}
}

void _inknit_fill_circle_with_clip32(
	uint32_t *INKNIT_RESTRICT                 data,
	uint32_t                                  stride,
	int32_t                                   cx,
	int32_t                                   cy,
	int32_t                                   radius,
	inknit_color_t                            color,
	const struct inknit_rect *INKNIT_RESTRICT clip_rect
) {
	INKNIT_ASSUME_CENTER_X(cx);
	INKNIT_ASSUME_CENTER_Y(cy);
	INKNIT_ASSUME_RANGE(
		radius, 0, INKNIT_CIRCLE_MAX, MSG_RADIUS_LESS_THAN_ZERO, MSG_RADIUS_GREATER_THAN_MAX_VALUE
	);
	INKNIT_ASSUME_COLOR(color);
	INKNIT_ASSUME_CLIP_RECT(clip_rect);

	int32_t dx = 0;
	int32_t dy = radius;
	int32_t d  = 1 - radius;

	do {
		_inknit_fill_circle_hlines32(data, stride, cx, cy, dx, dy, color, clip_rect);

		++dx;
		if (d < 0) {
			d += (dx << 1) + 1;
		} else {
			--dy;
			d += ((dx - dy) << 1) + 1;
		}
	} while (dx <= dy);
}

void inknit_fill_circle(
	struct inknit_image *image, int32_t cx, int32_t cy, int32_t radius, inknit_color_t color
) {
	INKNIT_ASSUME_IMAGE(image);

	uint32_t *INKNIT_RESTRICT const data   = (uint32_t *)image->data;
	const uint32_t                  stride = image->stride;

	struct inknit_rect clip_rect = {
		0,
		0,
		image->width - 1,
		(int16_t)(image->height - 1),
	};
	_inknit_fill_circle_with_clip32(data, stride, cx, cy, radius, color, &clip_rect);
}
