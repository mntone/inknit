/*
 * inknit <https://github.com/mntone/inknit>
 *
 * Copyright (C) 2025 mntone <901816+mntone@users.noreply.github.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

#ifdef __INTELLISENSE__
#include "../base.h.in"
#else
#include "../base.h"
#endif

#define _inknit_draw_circle_points32 INKNIT_CURRENT_INTERNAL_FUNC(draw_circle_points)
#ifdef INKNIT_ENABLE_FOLD
static inline void _inknit_draw_circle_points32(
	uint32_t *INKNIT_RESTRICT                 data,
	uint32_t                                  stride,
	int32_t                                   cx,
	int32_t                                   cy,
	int32_t                                   dx,
	int32_t                                   dy,
	inknit_color_t                            color,
	const struct inknit_rect *INKNIT_RESTRICT clip_rect
) {
	const int32_t xs[8] = {cx + dx, cx - dx, cx + dx, cx - dx, cx + dy, cx - dy, cx + dy, cx - dy};
	const int32_t ys[8] = {cy + dy, cy + dy, cy - dy, cy - dy, cy + dx, cy + dx, cy - dx, cy - dx};

	for (int32_t i = 0; i < 8; ++i) {
		const int32_t x = xs[i];
		const int32_t y = ys[i];
		if ((uint32_t)(x - clip_rect->left) <= (uint32_t)(clip_rect->right - clip_rect->left)
			&& (uint32_t)(y - clip_rect->top) <= (uint32_t)(clip_rect->bottom - clip_rect->top)) {
			_inknit_draw_point32(data, stride, (uint32_t)x, (uint32_t)y, color);
		}
	}
}
#else
static inline void _inknit_draw_circle_points32(
	uint32_t *INKNIT_RESTRICT                 data,
	uint32_t                                  stride,
	int32_t                                   cx,
	int32_t                                   cy,
	int32_t                                   dx,
	int32_t                                   dy,
	inknit_color_t                            color,
	const struct inknit_rect *INKNIT_RESTRICT clip_rect
) {
	const int32_t y1a = cy - dy;
	if (clip_rect->top <= y1a && y1a <= clip_rect->bottom) {
		const int32_t x1 = cx - dx;
		if (clip_rect->left <= x1 && x1 <= clip_rect->right) {
			_inknit_draw_point32(data, stride, (uint32_t)x1, (uint32_t)y1a, color);
		}

		if (dx != 0) {
			const int32_t x2 = cx + dx;
			if (clip_rect->left <= x2 && x2 <= clip_rect->right) {
				_inknit_draw_point32(data, stride, (uint32_t)x2, (uint32_t)y1a, color);
			}
		}
	}

	if (dy != 0) {
		const int32_t y2a = cy + dy;
		if (clip_rect->top <= y2a && y2a <= clip_rect->bottom) {
			const int32_t x1 = cx - dx;
			if (clip_rect->left <= x1 && x1 <= clip_rect->right) {
				_inknit_draw_point32(data, stride, (uint32_t)x1, (uint32_t)y2a, color);
			}

			if (dx != 0) {
				const int32_t x2 = cx + dx;
				if (clip_rect->left <= x2 && x2 <= clip_rect->right) {
					_inknit_draw_point32(data, stride, (uint32_t)x2, (uint32_t)y2a, color);
				}
			}
		}
	}

	if (dx != dy) {
		const int32_t y1b = cy - dx;
		if (clip_rect->top <= y1b && y1b <= clip_rect->bottom) {
			const int32_t x1 = cx - dy;
			if (clip_rect->left <= x1 && x1 <= clip_rect->right) {
				_inknit_draw_point32(data, stride, (uint32_t)x1, (uint32_t)y1b, color);
			}

			if (dy != 0) {
				const int32_t x2 = cx + dy;
				if (clip_rect->left <= x2 && x2 <= clip_rect->right) {
					_inknit_draw_point32(data, stride, (uint32_t)x2, (uint32_t)y1b, color);
				}
			}
		}

		if (dy != 0) {
			const int32_t y2b = cy + dx;
			if (clip_rect->top <= y2b && y2b <= clip_rect->bottom) {
				const int32_t x1 = cx - dy;
				if (clip_rect->left <= x1 && x1 <= clip_rect->right) {
					_inknit_draw_point32(data, stride, (uint32_t)x1, (uint32_t)y2b, color);
				}

				if (dy != 0) {
					const int32_t x2 = cx + dy;
					if (clip_rect->left <= x2 && x2 <= clip_rect->right) {
						_inknit_draw_point32(data, stride, (uint32_t)x2, (uint32_t)y2b, color);
					}
				}
			}
		}
	}
}
#endif

void _inknit_draw_circle32(
	uint32_t *INKNIT_RESTRICT                 data,
	uint32_t                                  stride,
	int32_t                                   cx,
	int32_t                                   cy,
	int32_t                                   radius,
	inknit_color_t                            color,
	const struct inknit_rect *INKNIT_RESTRICT clip_rect
) {
	INKNIT_ASSUME_CENTER_X(cx);
	INKNIT_ASSUME_CENTER_Y(cy);
	INKNIT_ASSUME_RANGE(
		radius, 0, INKNIT_CIRCLE_MAX, MSG_RADIUS_LESS_THAN_ZERO, MSG_RADIUS_GREATER_THAN_MAX_VALUE
	);
	INKNIT_ASSUME_COLOR(color);
	INKNIT_ASSUME_CLIP_RECT(clip_rect);

	int32_t dx = 0;
	int32_t dy = radius;
	int32_t d  = 1 - radius;

	do {
		_inknit_draw_circle_points32(data, stride, cx, cy, dx, dy, color, clip_rect);

		++dx;
		if (d < 0) {
			d += (dx << 1) + 1;
		} else {
			--dy;
			d += ((dx - dy) << 1) + 1;
		}
	} while (dx <= dy);
}

void inknit_draw_circle(
	struct inknit_image *image, int32_t cx, int32_t cy, int32_t radius, inknit_color_t color
) {
	INKNIT_ASSUME_IMAGE(image);

	uint32_t *INKNIT_RESTRICT const data   = (uint32_t *)image->data;
	const uint32_t                  stride = image->stride;

	struct inknit_rect clip_rect = {
		0,
		0,
		image->width - 1,
		(int16_t)(image->height - 1),
	};
	_inknit_draw_circle32(data, stride, cx, cy, radius, color, &clip_rect);
}
