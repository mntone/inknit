/*
 * inknit <https://github.com/mntone/inknit>
 *
 * Copyright (C) 2025 mntone <901816+mntone@users.noreply.github.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

#ifdef __INTELLISENSE__
#include "../../x1lsb/base.h"
#include "../base.h.in"
#else
#include "${LAYOUT_NAME}/base.h"
#include "../base.h"
#endif

static INKNIT_ALWAYS_INLINE void INTERNAL_FUNCNAME(draw_circle_points)(
	struct inknit_image *image, int32_t cx, int32_t cy, int32_t dx, int32_t dy, inknit_color_t color
) {
	INTERNAL_FUNCNAME(set_checked)(image, cx + dx, cy + dy, color);
	INTERNAL_FUNCNAME(set_checked)(image, cx + dx, cy - dy, color);
	INTERNAL_FUNCNAME(set_checked)(image, cx - dx, cy + dy, color);
	INTERNAL_FUNCNAME(set_checked)(image, cx - dx, cy - dy, color);

	INTERNAL_FUNCNAME(set_checked)(image, cx + dy, cy + dx, color);
	INTERNAL_FUNCNAME(set_checked)(image, cx + dy, cy - dx, color);
	INTERNAL_FUNCNAME(set_checked)(image, cx - dy, cy + dx, color);
	INTERNAL_FUNCNAME(set_checked)(image, cx - dy, cy - dx, color);
}

void PUBLIC_FUNCNAME(draw_circle)(
	struct inknit_image *image,
	inknit_uint_t        cx,
	inknit_uint_t        cy,
	inknit_uint_t        radius,
	inknit_color_t       color
) {
	INKNIT_ASSUME(image != NULL, MSG_IMAGE_IS_NULL);
	INKNIT_ASSUME(image->pixel_layout == TARGET_LAYOUT, MSG_IMAGE_IS_INVALID_LAYOUT);
	INKNIT_ASSUME(image->alignment >= TARGET_ALIGNMENT, MSG_IMAGE_IS_INVALID_ALIGN);

	INKNIT_ASSUME(cx <= INKNIT_X_MAX, MSG_CX_GREATER_THAN_MAX_VALUE);
	INKNIT_ASSUME(cy <= INKNIT_Y_MAX, MSG_CY_GREATER_THAN_MAX_VALUE);
	INKNIT_ASSUME(radius <= INKNIT_RADIUS_MAX, MSG_RADIUS_GREATER_THAN_MAX_VALUE);

	INKNIT_ASSUME(color <= POW2_BITS_PER_PIXEL_NEG1, MSG_COLOR_GREATER_THAN_MAX_VALUE);

	int32_t dx = 0;
	int32_t dy = (int32_t)radius;
	int32_t d  = 1 - (int32_t)radius;

	do {
		INTERNAL_FUNCNAME(draw_circle_points)(image, (int32_t)cx, (int32_t)cy, dx, dy, color);

		++dx;
		if (d < 0) {
			d += (dx << 1) + 1;
		} else {
			--dy;
			d += ((dx - dy) << 1) + 1;
		}
	} while (dx <= dy);
}
