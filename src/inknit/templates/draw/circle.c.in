/*
 * inknit <https://github.com/mntone/inknit>
 *
 * Copyright (C) 2025 mntone <901816+mntone@users.noreply.github.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

#ifdef __INTELLISENSE__
#include "../base.h.in"
#else
#include "../base.h"
#endif

#define _inknit_draw_circle_points32 INKNIT_INTERNAL_FUNC(draw_circle_points, INKNIT_CURRENT_GROUP)
static inline void _inknit_draw_circle_points32(
	uint32_t      *data,
	uint32_t       stride,
	int32_t        cx,
	int32_t        cy,
	int32_t        dx,
	int32_t        dy,
	inknit_color_t color,
	int32_t        min_x,
	int32_t        min_y,
	int32_t        max_x,
	int32_t        max_y
) {
	const int32_t y1a = cy - dy;
	if (min_y <= y1a && y1a <= max_y) {
		const int32_t x1 = cx - dx;
		if (min_x <= x1 && x1 <= max_x) {
			_inknit_draw_point32(data, stride, (uint32_t)x1, (uint32_t)y1a, color);
		}

		if (dx != 0) {
			const int32_t x2 = cx + dx;
			if (min_x <= x2 && x2 <= max_x) {
				_inknit_draw_point32(data, stride, (uint32_t)x2, (uint32_t)y1a, color);
			}
		}
	}

	if (dy != 0) {
		const int32_t y2a = cy + dy;
		if (min_y <= y2a && y2a <= max_y) {
			const int32_t x1 = cx - dx;
			if (min_x <= x1 && x1 <= max_x) {
				_inknit_draw_point32(data, stride, (uint32_t)x1, (uint32_t)y2a, color);
			}

			if (dx != 0) {
				const int32_t x2 = cx + dx;
				if (min_x <= x2 && x2 <= max_x) {
					_inknit_draw_point32(data, stride, (uint32_t)x2, (uint32_t)y2a, color);
				}
			}
		}
	}

	if (dx != dy) {
		const int32_t y1b = cy - dx;
		if (min_y <= y1b && y1b <= max_y) {
			const int32_t x1 = cx - dy;
			if (min_x <= x1 && x1 <= max_x) {
				_inknit_draw_point32(data, stride, (uint32_t)x1, (uint32_t)y1b, color);
			}

			if (dy != 0) {
				const int32_t x2 = cx + dy;
				if (min_x <= x2 && x2 <= max_x) {
					_inknit_draw_point32(data, stride, (uint32_t)x2, (uint32_t)y1b, color);
				}
			}
		}

		if (dy != 0) {
			const int32_t y2b = cy + dx;
			if (min_y <= y2b && y2b <= max_y) {
				const int32_t x1 = cx - dy;
				if (min_x <= x1 && x1 <= max_x) {
					_inknit_draw_point32(data, stride, (uint32_t)x1, (uint32_t)y2b, color);
				}

				if (dy != 0) {
					const int32_t x2 = cx + dy;
					if (min_x <= x2 && x2 <= max_x) {
						_inknit_draw_point32(data, stride, (uint32_t)x2, (uint32_t)y2b, color);
					}
				}
			}
		}
	}
}

void _inknit_draw_circle32(
	uint32_t      *data,
	uint32_t       stride,
	int32_t        cx,
	int32_t        cy,
	int32_t        radius,
	inknit_color_t color,
	int32_t        min_x,
	int32_t        min_y,
	int32_t        max_x,
	int32_t        max_y
) {
	INKNIT_ASSUME_CENTER_X(cx);
	INKNIT_ASSUME_CENTER_Y(cy);
	INKNIT_ASSUME_RANGE(
		radius, 0, INKNIT_CIRCLE_MAX, MSG_RADIUS_LESS_THAN_ZERO, MSG_RADIUS_GREATER_THAN_MAX_VALUE
	);
	INKNIT_ASSUME_COLOR(color);
	INKNIT_ASSUME_CLIP_RECT(min_x, min_y, min_y, max_y);

	int32_t dx = 0;
	int32_t dy = radius;
	int32_t d  = 1 - radius;

	do {
		_inknit_draw_circle_points32(
			data, stride, cx, cy, dx, dy, color, min_x, min_y, max_x, max_y
		);

		++dx;
		if (d < 0) {
			d += (dx << 1) + 1;
		} else {
			--dy;
			d += ((dx - dy) << 1) + 1;
		}
	} while (dx <= dy);
}

void PUBLIC_FUNCNAME(draw_circle)(
	struct inknit_image *image, int32_t cx, int32_t cy, int32_t radius, inknit_color_t color
) {
	INKNIT_ASSUME_IMAGE(image);

	uint32_t *const data = (uint32_t *)image->data;

	const uint32_t stride = bytes_to_pixels(image->stride);

	const int32_t min_x = 0;
	const int32_t min_y = 0;
	const int32_t max_x = image->width - 1;
	const int32_t max_y = image->height - 1;

	_inknit_draw_circle32(data, stride, cx, cy, radius, color, min_x, min_y, max_x, max_y);
}
