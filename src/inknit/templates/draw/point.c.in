/*
 * inknit <https://github.com/mntone/inknit>
 *
 * Copyright (C) 2025 mntone <901816+mntone@users.noreply.github.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

#ifdef __INTELLISENSE__
#include "../base.h.in"
#else
#include "../base.h"
#endif

#ifndef INKNIT_ENABLE_DRAW_POINT_ASM
void _inknit_draw_point32(uint32_t *data, uint32_t stride, uint32_t x, uint32_t y, uint32_t color) {
	const uint32_t pixel   = stride * y + x;
	const uint32_t wordidx = pixels_to_wordidx(pixel);
	const int32_t  bitpos  = pixels_to_bitpos(pixel);

	const uint32_t mask          = write_mask(bitpos);
	const uint32_t color_wordval = color << bitpos;

	const uint32_t read_wordval  = swap_if_required(data[wordidx]);
	const uint32_t write_wordval = (read_wordval & ~mask) | color_wordval;
	data[wordidx]                = swap_if_required(write_wordval);
}
#endif

void _inknit_draw_point_with_clip32(
	uint32_t      *data,
	uint32_t       stride,
	int32_t        x,
	int32_t        y,
	inknit_color_t color,
	int32_t        min_x,
	int32_t        min_y,
	int32_t        max_x,
	int32_t        max_y
) {
	INKNIT_ASSUME_COORD_X(x);
	INKNIT_ASSUME_COORD_Y(y);
	INKNIT_ASSUME_COLOR(color);
	INKNIT_ASSUME_CLIP_RECT(min_x, min_y, min_y, max_y);

	if (x < min_x || max_x < x) {
		return;
	}
	if (y < min_y || max_y < y) {
		return;
	}

	_inknit_draw_point32(data, stride, (uint32_t)x, (uint32_t)y, color);
}

void PUBLIC_FUNCNAME(draw_point)(
	struct inknit_image *image, int32_t x, int32_t y, inknit_color_t color
) {
	INKNIT_ASSUME(image != NULL, MSG_IMAGE_IS_NULL);
	INKNIT_ASSUME(image->pixel_layout == TARGET_LAYOUT, MSG_IMAGE_IS_INVALID_LAYOUT);
	INKNIT_ASSUME(image->alignment >= INKNIT_ALIGN32, MSG_IMAGE_IS_INVALID_ALIGN);

	const uint32_t stride = bytes_to_pixels(image->stride);

	const int32_t min_x = 0;
	const int32_t min_y = 0;
	const int32_t max_x = image->width - 1;
	const int32_t max_y = image->height - 1;

	_inknit_draw_point_with_clip32(image->data, stride, x, y, color, min_x, min_y, max_x, max_y);
}
